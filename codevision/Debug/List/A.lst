
AVRASM ver. 2.1.30  C:\Users\lenovo\Desktop\New folder\c\Debug\List\A.asm Sun May 28 18:51:13 2023

C:\Users\lenovo\Desktop\New folder\c\Debug\List\A.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\lenovo\Desktop\New folder\c\Debug\List\A.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\lenovo\Desktop\New folder\c\Debug\List\A.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\lenovo\Desktop\New folder\c\Debug\List\A.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\lenovo\Desktop\New folder\c\Debug\List\A.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\lenovo\Desktop\New folder\c\Debug\List\A.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\lenovo\Desktop\New folder\c\Debug\List\A.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\lenovo\Desktop\New folder\c\Debug\List\A.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\lenovo\Desktop\New folder\c\Debug\List\A.asm(1096): warning: Register r12 already defined by the .DEF directive
C:\Users\lenovo\Desktop\New folder\c\Debug\List\A.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _menu_count=R4
                 	.DEF _menu_count_msb=R5
                 	.DEF _ps_count=R6
                 	.DEF _ps_count_msb=R7
                 	.DEF _seg_count=R8
                 	.DEF _seg_count_msb=R9
                 	.DEF _inout=R10
                 	.DEF _inout_msb=R11
                 	.DEF _lcd_cl=R12
                 	.DEF _lcd_cl_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0090 	JMP  __RESET
000002 940c 00bd 	JMP  _ext_int0_isr
000004 940c 00e1 	JMP  _ext_int1_isr
000006 940c 0128 	JMP  _ext_int2_isr
000008 940c 0000 	JMP  0x00
00000a 940c 01cf 	JMP  _timer2_ovf_isr
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 018f 	JMP  _timer0_ovf_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0001
000034 0000      	.DB  0x1,0x0,0x0,0x0
000035 0000
000036 0000      	.DB  0x0,0x0,0x0,0x0
000037 0000      	.DB  0x0,0x0
                 
                 _0x3:
000038 f9c0
000039 b0a4
00003a 9299
00003b f882      	.DB  0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8
00003c 9080
00003d 8320
C:\Users\lenovo\Desktop\New folder\c\Debug\List\A.asm(1142): warning: .cseg .db misalignment - padding zero byte
00003e 00c6      	.DB  0x80,0x90,0x20,0x83,0xC6
                 _0x4:
00003f 3837
000040 2339
000041 3534
000042 2a36      	.DB  0x37,0x38,0x39,0x23,0x34,0x35,0x36,0x2A
000043 3231
000044 2d33
000045 3063
000046 2b3d      	.DB  0x31,0x32,0x33,0x2D,0x63,0x30,0x3D,0x2B
                 _0x5:
000047 656c
C:\Users\lenovo\Desktop\New folder\c\Debug\List\A.asm(1147): warning: .cseg .db misalignment - padding zero byte
000048 0064      	.DB  0x6C,0x65,0x64
                 _0x6:
000049 7562
00004a 7a7a
00004b 7265      	.DB  0x62,0x75,0x7A,0x7A,0x65,0x72
                 _0x7:
00004c 6572
00004d 616c
C:\Users\lenovo\Desktop\New folder\c\Debug\List\A.asm(1151): warning: .cseg .db misalignment - padding zero byte
00004e 0079      	.DB  0x72,0x65,0x6C,0x61,0x79
                 _0x0:
00004f 7325
000050 2a00
000051 3431
000052 0023      	.DB  0x25,0x73,0x0,0x2A,0x31,0x34,0x23,0x0
000053 2020
000054 7274
000055 6575
000056 2000      	.DB  0x20,0x20,0x74,0x72,0x75,0x65,0x0,0x20
000057 7720
000058 6f72
000059 676e
00005a 7000      	.DB  0x20,0x77,0x72,0x6F,0x6E,0x67,0x0,0x70
00005b 7361
00005c 7773
00005d 726f
00005e 3a64      	.DB  0x61,0x73,0x73,0x77,0x6F,0x72,0x64,0x3A
00005f 3c00
000060 3d3d
000061 3d00
000062 3e3d      	.DB  0x0,0x3C,0x3D,0x3D,0x0,0x3D,0x3D,0x3E
C:\Users\lenovo\Desktop\New folder\c\Debug\List\A.asm(1158): warning: .cseg .db misalignment - padding zero byte
000063 0000      	.DB  0x0
                 _0x2000003:
000064 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000065 000a      	.DW  0x0A
000066 0004      	.DW  0x04
000067 0066      	.DW  __REG_VARS*2
                 
000068 000d      	.DW  0x0D
000069 0298      	.DW  _seg
00006a 0070      	.DW  _0x3*2
                 
00006b 0010      	.DW  0x10
00006c 02a5      	.DW  _keybord
00006d 007e      	.DW  _0x4*2
                 
00006e 0003      	.DW  0x03
00006f 02ba      	.DW  _menu1
000070 008e      	.DW  _0x5*2
                 
000071 0006      	.DW  0x06
000072 02be      	.DW  _menu2
000073 0092      	.DW  _0x6*2
                 
000074 0005      	.DW  0x05
000075 02c5      	.DW  _menu3
000076 0098      	.DW  _0x7*2
                 
000077 0005      	.DW  0x05
000078 0260      	.DW  _0x25
000079 00a1      	.DW  _0x0*2+3
                 
00007a 0007      	.DW  0x07
00007b 0265      	.DW  _0x25+5
00007c 00a6      	.DW  _0x0*2+8
                 
00007d 0008      	.DW  0x08
00007e 026c      	.DW  _0x25+12
00007f 00ad      	.DW  _0x0*2+15
                 
000080 0001      	.DW  0x01
000081 0274      	.DW  _0x25+20
000082 00a0      	.DW  _0x0*2+2
                 
000083 000a      	.DW  0x0A
000084 0275      	.DW  _0x30
000085 00b5      	.DW  _0x0*2+23
                 
000086 0004      	.DW  0x04
000087 027f      	.DW  _0x30+10
000088 00bf      	.DW  _0x0*2+33
                 
000089 0004      	.DW  0x04
00008a 0283      	.DW  _0x30+14
00008b 00c3      	.DW  _0x0*2+37
                 
00008c 0002      	.DW  0x02
00008d 02cd      	.DW  __base_y_G100
00008e 00c8      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00008f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000090 94f8      	CLI
000091 27ee      	CLR  R30
000092 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000093 e0f1      	LDI  R31,1
000094 bffb      	OUT  GICR,R31
000095 bfeb      	OUT  GICR,R30
000096 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000097 e08d      	LDI  R24,(14-2)+1
000098 e0a2      	LDI  R26,2
000099 27bb      	CLR  R27
                 __CLEAR_REG:
00009a 93ed      	ST   X+,R30
00009b 958a      	DEC  R24
00009c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00009d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00009e e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00009f e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000a0 93ed      	ST   X+,R30
0000a1 9701      	SBIW R24,1
0000a2 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000a3 ecea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000a4 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000a5 9185      	LPM  R24,Z+
0000a6 9195      	LPM  R25,Z+
0000a7 9700      	SBIW R24,0
0000a8 f061      	BREQ __GLOBAL_INI_END
0000a9 91a5      	LPM  R26,Z+
0000aa 91b5      	LPM  R27,Z+
0000ab 9005      	LPM  R0,Z+
0000ac 9015      	LPM  R1,Z+
0000ad 01bf      	MOVW R22,R30
0000ae 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000af 9005      	LPM  R0,Z+
0000b0 920d      	ST   X+,R0
0000b1 9701      	SBIW R24,1
0000b2 f7e1      	BRNE __GLOBAL_INI_LOOP
0000b3 01fb      	MOVW R30,R22
0000b4 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000b5 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000b6 bfed      	OUT  SPL,R30
0000b7 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000b8 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000b9 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000ba e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000bb 940c 01d0 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;
                 ;
                 ;unsigned char lcd_str[17];
                 ;char seg[]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90,0x20,0X83,0XC6};
                 
                 	.DSEG
                 ;char keybord[16] = {'7','8','9','#','4','5','6','*','1','2','3','-','c','0','=','+'};
                 ;//{'1','2','3','A','4','5','6','B','7','8','9','C','*','0','#','D'};
                 ;char password[5];
                 ;char menu1[]="led";
                 ;char menu2[]="buzzer";
                 ;char menu3[]="relay";
                 ;int menu_count=1;
                 ;int ps_count =0;
                 ;int seg_count=0;
                 ;int inout=0;
                 ;int lcd_cl=0;
                 ;int t_bounce =0;
                 ;
                 ;
                 ;
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 001A {if(ps_count==5 && t_bounce==0){
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
0000bd 93aa      	ST   -Y,R26
0000be 93ba      	ST   -Y,R27
0000bf 93ea      	ST   -Y,R30
0000c0 93fa      	ST   -Y,R31
0000c1 b7ef      	IN   R30,SREG
0000c2 93ea      	ST   -Y,R30
0000c3 940e 04f3 	CALL SUBOPT_0x0
0000c5 f431      	BRNE _0x9
0000c6 91a0 02cb 	LDS  R26,_t_bounce
0000c8 91b0 02cc 	LDS  R27,_t_bounce+1
0000ca 9710      	SBIW R26,0
0000cb f009      	BREQ _0xA
                 _0x9:
0000cc c00d      	RJMP _0x8
                 _0xA:
                 ; 0000 001B     t_bounce=1;
0000cd 940e 04f8 	CALL SUBOPT_0x1
                 ; 0000 001C     if(menu_count==3){
0000cf 940e 04ff 	CALL SUBOPT_0x2
0000d1 f411      	BRNE _0xB
                 ; 0000 001D         menu_count=0;}
0000d2 2444      	CLR  R4
0000d3 2455      	CLR  R5
                 ; 0000 001E     menu_count++;
                 _0xB:
0000d4 01f2      	MOVW R30,R4
0000d5 9631      	ADIW R30,1
0000d6 012f      	MOVW R4,R30
                 ; 0000 001F     lcd_cl=1;}
0000d7 e0e1      	LDI  R30,LOW(1)
0000d8 e0f0      	LDI  R31,HIGH(1)
0000d9 016f      	MOVW R12,R30
                 ; 0000 0020 }
                 _0x8:
0000da 91e9      	LD   R30,Y+
0000db bfef      	OUT  SREG,R30
0000dc 91f9      	LD   R31,Y+
0000dd 91e9      	LD   R30,Y+
0000de 91b9      	LD   R27,Y+
0000df 91a9      	LD   R26,Y+
0000e0 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;
                 ;// External Interrupt 1 service routine
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0026 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
0000e1 940e 0504 	CALL SUBOPT_0x3
                 ; 0000 0027 if (ps_count==5 && t_bounce==0){
0000e3 f431      	BRNE _0xD
0000e4 91a0 02cb 	LDS  R26,_t_bounce
0000e6 91b0 02cc 	LDS  R27,_t_bounce+1
0000e8 9710      	SBIW R26,0
0000e9 f009      	BREQ _0xE
                 _0xD:
0000ea c03c      	RJMP _0xC
                 _0xE:
                 ; 0000 0028     t_bounce=1;
0000eb 940e 04f8 	CALL SUBOPT_0x1
                 ; 0000 0029     lcd_cl=1;
0000ed e0e1      	LDI  R30,LOW(1)
0000ee e0f0      	LDI  R31,HIGH(1)
0000ef 016f      	MOVW R12,R30
                 ; 0000 002A     switch(inout){
0000f0 01f5      	MOVW R30,R10
                 ; 0000 002B         case 0:
0000f1 9730      	SBIW R30,0
0000f2 f549      	BRNE _0x12
                 ; 0000 002C             inout=1;
0000f3 e0e1      	LDI  R30,LOW(1)
0000f4 e0f0      	LDI  R31,HIGH(1)
0000f5 015f      	MOVW R10,R30
                 ; 0000 002D             lcd_cl=1;
0000f6 016f      	MOVW R12,R30
                 ; 0000 002E             switch(menu_count){
0000f7 01f2      	MOVW R30,R4
                 ; 0000 002F                 case 1:
0000f8 30e1      	CPI  R30,LOW(0x1)
0000f9 e0a0      	LDI  R26,HIGH(0x1)
0000fa 07fa      	CPC  R31,R26
0000fb f439      	BRNE _0x16
                 ; 0000 0030                     PORTC=0X00;
0000fc e0e0      	LDI  R30,LOW(0)
0000fd bbe5      	OUT  0x15,R30
                 ; 0000 0031                     PORTA=seg[10];
                +
0000fe 91e0 02a2+LDS R30 , _seg + ( 10 )
                 	__GETB1MN _seg,10
000100 bbeb      	OUT  0x1B,R30
                 ; 0000 0032                     PORTC.0=1;
000101 9aa8      	SBI  0x15,0
                 ; 0000 0033                     break;
000102 c018      	RJMP _0x15
                 ; 0000 0034                 case 2:
                 _0x16:
000103 30e2      	CPI  R30,LOW(0x2)
000104 e0a0      	LDI  R26,HIGH(0x2)
000105 07fa      	CPC  R31,R26
000106 f451      	BRNE _0x19
                 ; 0000 0035                     PORTC=0X00;
000107 e0e0      	LDI  R30,LOW(0)
000108 bbe5      	OUT  0x15,R30
                 ; 0000 0036                     PORTA=seg[11];
                +
000109 91e0 02a3+LDS R30 , _seg + ( 11 )
                 	__GETB1MN _seg,11
00010b bbeb      	OUT  0x1B,R30
                 ; 0000 0037                     PORTC.1=1;
00010c 9aa9      	SBI  0x15,1
                 ; 0000 0038                     delay_ms(1000);
00010d 940e 0512 	CALL SUBOPT_0x4
                 ; 0000 0039                     PORTC.1=0;
00010f 98a9      	CBI  0x15,1
                 ; 0000 003A                     break;
000110 c00a      	RJMP _0x15
                 ; 0000 003B                 case 3:
                 _0x19:
000111 30e3      	CPI  R30,LOW(0x3)
000112 e0a0      	LDI  R26,HIGH(0x3)
000113 07fa      	CPC  R31,R26
000114 f431      	BRNE _0x15
                 ; 0000 003C                     PORTC=0X00;
000115 e0e0      	LDI  R30,LOW(0)
000116 bbe5      	OUT  0x15,R30
                 ; 0000 003D                     PORTA=seg[12];
                +
000117 91e0 02a4+LDS R30 , _seg + ( 12 )
                 	__GETB1MN _seg,12
000119 bbeb      	OUT  0x1B,R30
                 ; 0000 003E                     PORTC.2=1;
00011a 9aaa      	SBI  0x15,2
                 ; 0000 003F                     break;
                 ; 0000 0040             }
                 _0x15:
                 ; 0000 0041             break;
00011b c00b      	RJMP _0x11
                 ; 0000 0042         case 1:
                 _0x12:
00011c 30e1      	CPI  R30,LOW(0x1)
00011d e0a0      	LDI  R26,HIGH(0x1)
00011e 07fa      	CPC  R31,R26
00011f f439      	BRNE _0x11
                 ; 0000 0043             lcd_cl=1;
000120 e0e1      	LDI  R30,LOW(1)
000121 e0f0      	LDI  R31,HIGH(1)
000122 016f      	MOVW R12,R30
                 ; 0000 0044             PORTC=0X00;
000123 e0e0      	LDI  R30,LOW(0)
000124 bbe5      	OUT  0x15,R30
                 ; 0000 0045             inout=0;
000125 24aa      	CLR  R10
000126 24bb      	CLR  R11
                 ; 0000 0046             break;
                 ; 0000 0047 
                 ; 0000 0048 
                 ; 0000 0049     }
                 _0x11:
                 ; 0000 004A }
                 ; 0000 004B 
                 ; 0000 004C }
                 _0xC:
000127 c059      	RJMP _0x4B
                 ; .FEND
                 ;
                 ;
                 ;
                 ;// External Interrupt 2 service routine
                 ;interrupt [EXT_INT2] void ext_int2_isr(void)
                 ; 0000 0052 {
                 _ext_int2_isr:
                 ; .FSTART _ext_int2_isr
000128 940e 0504 	CALL SUBOPT_0x3
                 ; 0000 0053 if (ps_count!=5){
00012a f409      	BRNE PC+2
00012b c055      	RJMP _0x22
                 ; 0000 0054     lcd_clear();
00012c 940e 029b 	CALL _lcd_clear
                 ; 0000 0055     ps_count ++;
00012e 01f3      	MOVW R30,R6
00012f 9631      	ADIW R30,1
000130 013f      	MOVW R6,R30
                 ; 0000 0056     password[ps_count-1] = keybord[PIND/16];
000131 9731      	SBIW R30,1
000132 54eb      	SUBI R30,LOW(-_password)
000133 4ffd      	SBCI R31,HIGH(-_password)
000134 01bf      	MOVW R22,R30
000135 b3e0      	IN   R30,0x10
000136 e0f0      	LDI  R31,0
000137 01df      	MOVW R26,R30
000138 e1e0      	LDI  R30,LOW(16)
000139 e0f0      	LDI  R31,HIGH(16)
00013a 940e 0588 	CALL __DIVW21
00013c 55eb      	SUBI R30,LOW(-_keybord)
00013d 4ffd      	SBCI R31,HIGH(-_keybord)
00013e 81e0      	LD   R30,Z
00013f 01db      	MOVW R26,R22
000140 93ec      	ST   X,R30
                 ; 0000 0057     sprintf(lcd_str,"%s",password);
000141 e8e7      	LDI  R30,LOW(_lcd_str)
000142 e0f2      	LDI  R31,HIGH(_lcd_str)
000143 93fa      	ST   -Y,R31
000144 93ea      	ST   -Y,R30
                +
000145 e9ee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000146 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000147 93fa      	ST   -Y,R31
000148 93ea      	ST   -Y,R30
000149 ebe5      	LDI  R30,LOW(_password)
00014a e0f2      	LDI  R31,HIGH(_password)
00014b 2766      	CLR  R22
00014c 2777      	CLR  R23
00014d 940e 05b1 	CALL __PUTPARD1
00014f e084      	LDI  R24,4
000150 940e 047d 	CALL _sprintf
000152 9628      	ADIW R28,8
                 ; 0000 0058     lcd_puts(lcd_str);
000153 e8a7      	LDI  R26,LOW(_lcd_str)
000154 e0b2      	LDI  R27,HIGH(_lcd_str)
000155 940e 02c9 	CALL _lcd_puts
                 ; 0000 0059 
                 ; 0000 005A     if (ps_count==4){
000157 e0e4      	LDI  R30,LOW(4)
000158 e0f0      	LDI  R31,HIGH(4)
000159 15e6      	CP   R30,R6
00015a 05f7      	CPC  R31,R7
00015b f529      	BRNE _0x23
                 ; 0000 005B         ps_count=0;
00015c 2466      	CLR  R6
00015d 2477      	CLR  R7
                 ; 0000 005C 
                 ; 0000 005D         if(strcmp(password,"*14#")==0){
00015e ebe5      	LDI  R30,LOW(_password)
00015f e0f2      	LDI  R31,HIGH(_password)
000160 93fa      	ST   -Y,R31
000161 93ea      	ST   -Y,R30
                +
000162 e6a0     +LDI R26 , LOW ( _0x25 + ( 0 ) )
000163 e0b2     +LDI R27 , HIGH ( _0x25 + ( 0 ) )
                 	__POINTW2MN _0x25,0
000164 940e 04b1 	CALL _strcmp
000166 30e0      	CPI  R30,0
000167 f449      	BRNE _0x24
                 ; 0000 005E             lcd_puts("  true");
                +
000168 e6a5     +LDI R26 , LOW ( _0x25 + ( 5 ) )
000169 e0b2     +LDI R27 , HIGH ( _0x25 + ( 5 ) )
                 	__POINTW2MN _0x25,5
00016a 940e 0516 	CALL SUBOPT_0x5
                 ; 0000 005F             delay_ms(1000);
                 ; 0000 0060             lcd_clear();
00016c d12e      	RCALL _lcd_clear
                 ; 0000 0061             ps_count = 5;
00016d e0e5      	LDI  R30,LOW(5)
00016e e0f0      	LDI  R31,HIGH(5)
00016f 013f      	MOVW R6,R30
                 ; 0000 0062             }
                 ; 0000 0063         else{
000170 c010      	RJMP _0x26
                 _0x24:
                 ; 0000 0064             lcd_puts("  wrong");
                +
000171 e6ac     +LDI R26 , LOW ( _0x25 + ( 12 ) )
000172 e0b2     +LDI R27 , HIGH ( _0x25 + ( 12 ) )
                 	__POINTW2MN _0x25,12
000173 940e 0516 	CALL SUBOPT_0x5
                 ; 0000 0065             delay_ms(1000);
                 ; 0000 0066             lcd_clear();
000175 d125      	RCALL _lcd_clear
                 ; 0000 0067             strncpy(password, "", sizeof(password));}
000176 ebe5      	LDI  R30,LOW(_password)
000177 e0f2      	LDI  R31,HIGH(_password)
000178 93fa      	ST   -Y,R31
000179 93ea      	ST   -Y,R30
                +
00017a e7e4     +LDI R30 , LOW ( _0x25 + ( 20 ) )
00017b e0f2     +LDI R31 , HIGH ( _0x25 + ( 20 ) )
                 	__POINTW1MN _0x25,20
00017c 93fa      	ST   -Y,R31
00017d 93ea      	ST   -Y,R30
00017e e0a5      	LDI  R26,LOW(5)
00017f 940e 04de 	CALL _strncpy
                 _0x26:
                 ; 0000 0068         }
                 ; 0000 0069 }}
                 _0x23:
                 _0x22:
                 _0x4B:
000181 91e9      	LD   R30,Y+
000182 bfef      	OUT  SREG,R30
000183 91f9      	LD   R31,Y+
000184 91e9      	LD   R30,Y+
000185 91b9      	LD   R27,Y+
000186 91a9      	LD   R26,Y+
000187 9199      	LD   R25,Y+
000188 9189      	LD   R24,Y+
000189 9179      	LD   R23,Y+
00018a 9169      	LD   R22,Y+
00018b 90f9      	LD   R15,Y+
00018c 9019      	LD   R1,Y+
00018d 9009      	LD   R0,Y+
00018e 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x25:
000260           	.BYTE 0x15
                 ;
                 ;
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 006F {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
00018f 920a      	ST   -Y,R0
000190 921a      	ST   -Y,R1
000191 939a      	ST   -Y,R25
000192 93aa      	ST   -Y,R26
000193 93ba      	ST   -Y,R27
000194 93ea      	ST   -Y,R30
000195 93fa      	ST   -Y,R31
000196 b7ef      	IN   R30,SREG
000197 93ea      	ST   -Y,R30
                 ; 0000 0070 if (ps_count==5 && inout==0){
000198 940e 04f3 	CALL SUBOPT_0x0
00019a f421      	BRNE _0x28
00019b 2400      	CLR  R0
00019c 140a      	CP   R0,R10
00019d 040b      	CPC  R0,R11
00019e f009      	BREQ _0x29
                 _0x28:
00019f c003      	RJMP _0x27
                 _0x29:
                 ; 0000 0071     PORTA=0XFF;
0001a0 efef      	LDI  R30,LOW(255)
0001a1 bbeb      	OUT  0x1B,R30
                 ; 0000 0072     return;}
0001a2 c022      	RJMP _0x4A
                 ; 0000 0073 if(seg_count==301 && ps_count!=5)
                 _0x27:
0001a3 e2ed      	LDI  R30,LOW(301)
0001a4 e0f1      	LDI  R31,HIGH(301)
0001a5 15e8      	CP   R30,R8
0001a6 05f9      	CPC  R31,R9
0001a7 f419      	BRNE _0x2B
0001a8 940e 04f3 	CALL SUBOPT_0x0
0001aa f409      	BRNE _0x2C
                 _0x2B:
0001ab c002      	RJMP _0x2A
                 _0x2C:
                 ; 0000 0074     seg_count=0;
0001ac 2488      	CLR  R8
0001ad 2499      	CLR  R9
                 ; 0000 0075 seg_count++;
                 _0x2A:
0001ae 01f4      	MOVW R30,R8
0001af 9631      	ADIW R30,1
0001b0 014f      	MOVW R8,R30
                 ; 0000 0076 if (seg_count%30==1 && ps_count!=5){
0001b1 01d4      	MOVW R26,R8
0001b2 e1ee      	LDI  R30,LOW(30)
0001b3 e0f0      	LDI  R31,HIGH(30)
0001b4 940e 058d 	CALL __MODW21
0001b6 9731      	SBIW R30,1
0001b7 f419      	BRNE _0x2E
0001b8 940e 04f3 	CALL SUBOPT_0x0
0001ba f409      	BRNE _0x2F
                 _0x2E:
0001bb c009      	RJMP _0x2D
                 _0x2F:
                 ; 0000 0077     PORTA=seg[seg_count/30];}
0001bc 01d4      	MOVW R26,R8
0001bd e1ee      	LDI  R30,LOW(30)
0001be e0f0      	LDI  R31,HIGH(30)
0001bf 940e 0588 	CALL __DIVW21
0001c1 56e8      	SUBI R30,LOW(-_seg)
0001c2 4ffd      	SBCI R31,HIGH(-_seg)
0001c3 81e0      	LD   R30,Z
0001c4 bbeb      	OUT  0x1B,R30
                 ; 0000 0078 
                 ; 0000 0079 }
                 _0x2D:
                 _0x4A:
0001c5 91e9      	LD   R30,Y+
0001c6 bfef      	OUT  SREG,R30
0001c7 91f9      	LD   R31,Y+
0001c8 91e9      	LD   R30,Y+
0001c9 91b9      	LD   R27,Y+
0001ca 91a9      	LD   R26,Y+
0001cb 9199      	LD   R25,Y+
0001cc 9019      	LD   R1,Y+
0001cd 9009      	LD   R0,Y+
0001ce 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;// Timer2 overflow interrupt service routine
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 007E {
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
                 ; 0000 007F //not used
                 ; 0000 0080 }
0001cf 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0085 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0086 // Declare your local variables here
                 ; 0000 0087 
                 ; 0000 0088 // Input/Output Ports initialization
                 ; 0000 0089 // Port A initialization
                 ; 0000 008A // Function: Bit7=In Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 008B DDRA=(0<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
0001d0 e7ef      	LDI  R30,LOW(127)
0001d1 bbea      	OUT  0x1A,R30
                 ; 0000 008C // State: Bit7=T Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 008D PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0001d2 e0e0      	LDI  R30,LOW(0)
0001d3 bbeb      	OUT  0x1B,R30
                 ; 0000 008E 
                 ; 0000 008F // Port B initialization
                 ; 0000 0090 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0091 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0001d4 bbe7      	OUT  0x17,R30
                 ; 0000 0092 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0093 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0001d5 bbe8      	OUT  0x18,R30
                 ; 0000 0094 
                 ; 0000 0095 // Port C initialization
                 ; 0000 0096 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0097 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
0001d6 e0e7      	LDI  R30,LOW(7)
0001d7 bbe4      	OUT  0x14,R30
                 ; 0000 0098 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0099 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0001d8 e0e0      	LDI  R30,LOW(0)
0001d9 bbe5      	OUT  0x15,R30
                 ; 0000 009A 
                 ; 0000 009B // Port D initialization
                 ; 0000 009C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 009D DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0001da bbe1      	OUT  0x11,R30
                 ; 0000 009E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 009F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0001db bbe2      	OUT  0x12,R30
                 ; 0000 00A0 
                 ; 0000 00A1 // Timer/Counter 0 initialization
                 ; 0000 00A2 // Clock source: System Clock
                 ; 0000 00A3 // Clock value: 7.813 kHz
                 ; 0000 00A4 // Mode: Normal top=0xFF
                 ; 0000 00A5 // OC0 output: Disconnected
                 ; 0000 00A6 // Timer Period: 32.768 ms
                 ; 0000 00A7 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
0001dc e0e5      	LDI  R30,LOW(5)
0001dd bfe3      	OUT  0x33,R30
                 ; 0000 00A8 TCNT0=0x00;
0001de e0e0      	LDI  R30,LOW(0)
0001df bfe2      	OUT  0x32,R30
                 ; 0000 00A9 OCR0=0x00;
0001e0 bfec      	OUT  0x3C,R30
                 ; 0000 00AA 
                 ; 0000 00AB // Timer/Counter 1 initialization
                 ; 0000 00AC // Clock source: System Clock
                 ; 0000 00AD // Clock value: Timer1 Stopped
                 ; 0000 00AE // Mode: Normal top=0xFFFF
                 ; 0000 00AF // OC1A output: Disconnected
                 ; 0000 00B0 // OC1B output: Disconnected
                 ; 0000 00B1 // Noise Canceler: Off
                 ; 0000 00B2 // Input Capture on Falling Edge
                 ; 0000 00B3 // Timer1 Overflow Interrupt: Off
                 ; 0000 00B4 // Input Capture Interrupt: Off
                 ; 0000 00B5 // Compare A Match Interrupt: Off
                 ; 0000 00B6 // Compare B Match Interrupt: Off
                 ; 0000 00B7 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0001e1 bdef      	OUT  0x2F,R30
                 ; 0000 00B8 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0001e2 bdee      	OUT  0x2E,R30
                 ; 0000 00B9 TCNT1H=0x00;
0001e3 bded      	OUT  0x2D,R30
                 ; 0000 00BA TCNT1L=0x00;
0001e4 bdec      	OUT  0x2C,R30
                 ; 0000 00BB ICR1H=0x00;
0001e5 bde7      	OUT  0x27,R30
                 ; 0000 00BC ICR1L=0x00;
0001e6 bde6      	OUT  0x26,R30
                 ; 0000 00BD OCR1AH=0x00;
0001e7 bdeb      	OUT  0x2B,R30
                 ; 0000 00BE OCR1AL=0x00;
0001e8 bdea      	OUT  0x2A,R30
                 ; 0000 00BF OCR1BH=0x00;
0001e9 bde9      	OUT  0x29,R30
                 ; 0000 00C0 OCR1BL=0x00;
0001ea bde8      	OUT  0x28,R30
                 ; 0000 00C1 
                 ; 0000 00C2 // Timer/Counter 2 initialization
                 ; 0000 00C3 // Clock source: System Clock
                 ; 0000 00C4 // Clock value: 7.813 kHz
                 ; 0000 00C5 // Mode: Normal top=0xFF
                 ; 0000 00C6 // OC2 output: Disconnected
                 ; 0000 00C7 // Timer Period: 32.768 ms
                 ; 0000 00C8 ASSR=0<<AS2;
0001eb bde2      	OUT  0x22,R30
                 ; 0000 00C9 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (1<<CS22) | (1<<CS21) | (1<<CS20);
0001ec e0e7      	LDI  R30,LOW(7)
0001ed bde5      	OUT  0x25,R30
                 ; 0000 00CA TCNT2=0x00;
0001ee e0e0      	LDI  R30,LOW(0)
0001ef bde4      	OUT  0x24,R30
                 ; 0000 00CB OCR2=0x00;
0001f0 bde3      	OUT  0x23,R30
                 ; 0000 00CC 
                 ; 0000 00CD // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00CE TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
0001f1 e4e1      	LDI  R30,LOW(65)
0001f2 bfe9      	OUT  0x39,R30
                 ; 0000 00CF 
                 ; 0000 00D0 // External Interrupt(s) initialization
                 ; 0000 00D1 // INT0: On
                 ; 0000 00D2 // INT0 Mode: Rising Edge
                 ; 0000 00D3 // INT1: On
                 ; 0000 00D4 // INT1 Mode: Rising Edge
                 ; 0000 00D5 // INT2: On
                 ; 0000 00D6 // INT2 Mode: Rising Edge
                 ; 0000 00D7 GICR|=(1<<INT1) | (1<<INT0) | (1<<INT2);
0001f3 b7eb      	IN   R30,0x3B
0001f4 6ee0      	ORI  R30,LOW(0xE0)
0001f5 bfeb      	OUT  0x3B,R30
                 ; 0000 00D8 MCUCR=(1<<ISC11) | (1<<ISC10) | (1<<ISC01) | (1<<ISC00);
0001f6 e0ef      	LDI  R30,LOW(15)
0001f7 bfe5      	OUT  0x35,R30
                 ; 0000 00D9 MCUCSR=(1<<ISC2);
0001f8 e4e0      	LDI  R30,LOW(64)
0001f9 bfe4      	OUT  0x34,R30
                 ; 0000 00DA GIFR=(1<<INTF1) | (1<<INTF0) | (1<<INTF2);
0001fa eee0      	LDI  R30,LOW(224)
0001fb bfea      	OUT  0x3A,R30
                 ; 0000 00DB 
                 ; 0000 00DC // USART initialization
                 ; 0000 00DD // USART disabled
                 ; 0000 00DE UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0001fc e0e0      	LDI  R30,LOW(0)
0001fd b9ea      	OUT  0xA,R30
                 ; 0000 00DF 
                 ; 0000 00E0 // Analog Comparator initialization
                 ; 0000 00E1 // Analog Comparator: Off
                 ; 0000 00E2 // The Analog Comparator's positive input is
                 ; 0000 00E3 // connected to the AIN0 pin
                 ; 0000 00E4 // The Analog Comparator's negative input is
                 ; 0000 00E5 // connected to the AIN1 pin
                 ; 0000 00E6 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0001fe e8e0      	LDI  R30,LOW(128)
0001ff b9e8      	OUT  0x8,R30
                 ; 0000 00E7 SFIOR=(0<<ACME);
000200 e0e0      	LDI  R30,LOW(0)
000201 bfe0      	OUT  0x30,R30
                 ; 0000 00E8 
                 ; 0000 00E9 // ADC initialization
                 ; 0000 00EA // ADC disabled
                 ; 0000 00EB ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000202 b9e6      	OUT  0x6,R30
                 ; 0000 00EC 
                 ; 0000 00ED // SPI initialization
                 ; 0000 00EE // SPI disabled
                 ; 0000 00EF SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000203 b9ed      	OUT  0xD,R30
                 ; 0000 00F0 
                 ; 0000 00F1 // TWI initialization
                 ; 0000 00F2 // TWI disabled
                 ; 0000 00F3 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000204 bfe6      	OUT  0x36,R30
                 ; 0000 00F4 
                 ; 0000 00F5 // Alphanumeric LCD initialization
                 ; 0000 00F6 // Connections are specified in the
                 ; 0000 00F7 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00F8 // RS - PORTB Bit 0
                 ; 0000 00F9 // RD - PORTB Bit 1
                 ; 0000 00FA // EN - PORTB Bit 3
                 ; 0000 00FB // D4 - PORTB Bit 4
                 ; 0000 00FC // D5 - PORTB Bit 5
                 ; 0000 00FD // D6 - PORTB Bit 6
                 ; 0000 00FE // D7 - PORTB Bit 7
                 ; 0000 00FF // Characters/line: 8
                 ; 0000 0100 lcd_init(16);
000205 e1a0      	LDI  R26,LOW(16)
000206 d0d3      	RCALL _lcd_init
                 ; 0000 0101 // Global enable interrupts
                 ; 0000 0102 #asm("sei")
000207 9478      	sei
                 ; 0000 0103 
                 ; 0000 0104 lcd_puts("password:");
                +
000208 e7a5     +LDI R26 , LOW ( _0x30 + ( 0 ) )
000209 e0b2     +LDI R27 , HIGH ( _0x30 + ( 0 ) )
                 	__POINTW2MN _0x30,0
00020a 940e 0516 	CALL SUBOPT_0x5
                 ; 0000 0105 delay_ms(1000);
                 ; 0000 0106 lcd_clear();
00020c d08e      	RCALL _lcd_clear
                 ; 0000 0107 
                 ; 0000 0108 while (1)
                 _0x31:
                 ; 0000 0109       {if (ps_count==5){
00020d 940e 04f3 	CALL SUBOPT_0x0
00020f f009      	BREQ PC+2
000210 c057      	RJMP _0x34
                 ; 0000 010A           if(t_bounce==1){
000211 91a0 02cb 	LDS  R26,_t_bounce
000213 91b0 02cc 	LDS  R27,_t_bounce+1
000215 9711      	SBIW R26,1
000216 f449      	BRNE _0x35
                 ; 0000 010B               delay_ms(200);
000217 eca8      	LDI  R26,LOW(200)
000218 e0b0      	LDI  R27,0
000219 940e 0563 	CALL _delay_ms
                 ; 0000 010C               t_bounce=0;}
00021b e0e0      	LDI  R30,LOW(0)
00021c 93e0 02cb 	STS  _t_bounce,R30
00021e 93e0 02cc 	STS  _t_bounce+1,R30
                 ; 0000 010D 
                 ; 0000 010E           if (lcd_cl==1){
                 _0x35:
000220 e0e1      	LDI  R30,LOW(1)
000221 e0f0      	LDI  R31,HIGH(1)
000222 15ec      	CP   R30,R12
000223 05fd      	CPC  R31,R13
000224 f419      	BRNE _0x36
                 ; 0000 010F               lcd_clear();
000225 d075      	RCALL _lcd_clear
                 ; 0000 0110               lcd_cl=0;}
000226 24cc      	CLR  R12
000227 24dd      	CLR  R13
                 ; 0000 0111 
                 ; 0000 0112           if(menu_count!=3 && inout==0){
                 _0x36:
000228 940e 04ff 	CALL SUBOPT_0x2
00022a f021      	BREQ _0x38
00022b 2400      	CLR  R0
00022c 140a      	CP   R0,R10
00022d 040b      	CPC  R0,R11
00022e f009      	BREQ _0x39
                 _0x38:
00022f c006      	RJMP _0x37
                 _0x39:
                 ; 0000 0113               lcd_gotoxy(0,0);
000230 940e 0519 	CALL SUBOPT_0x6
                 ; 0000 0114               lcd_puts(menu1);
000232 d096      	RCALL _lcd_puts
                 ; 0000 0115               lcd_gotoxy(0,1);
000233 940e 0521 	CALL SUBOPT_0x7
                 ; 0000 0116               lcd_puts(menu2);}
000235 c01b      	RJMP _0x46
                 ; 0000 0117           else if(menu_count!=3 && inout==1){
                 _0x37:
000236 940e 04ff 	CALL SUBOPT_0x2
000238 f029      	BREQ _0x3C
000239 e0e1      	LDI  R30,LOW(1)
00023a e0f0      	LDI  R31,HIGH(1)
00023b 15ea      	CP   R30,R10
00023c 05fb      	CPC  R31,R11
00023d f009      	BREQ _0x3D
                 _0x3C:
00023e c00c      	RJMP _0x3B
                 _0x3D:
                 ; 0000 0118               if (menu_count==1){
00023f e0e1      	LDI  R30,LOW(1)
000240 e0f0      	LDI  R31,HIGH(1)
000241 15e4      	CP   R30,R4
000242 05f5      	CPC  R31,R5
000243 f419      	BRNE _0x3E
                 ; 0000 0119                   lcd_gotoxy(0,0);
000244 940e 0519 	CALL SUBOPT_0x6
                 ; 0000 011A                   lcd_puts(menu1);}
000246 c002      	RJMP _0x47
                 ; 0000 011B               else{
                 _0x3E:
                 ; 0000 011C                   lcd_gotoxy(0,1);
000247 940e 0521 	CALL SUBOPT_0x7
                 ; 0000 011D                   lcd_puts(menu2);}}
                 _0x47:
000249 d07f      	RCALL _lcd_puts
                 ; 0000 011E           else{
00024a c007      	RJMP _0x40
                 _0x3B:
                 ; 0000 011F               lcd_gotoxy(0,0);
00024b e0e0      	LDI  R30,LOW(0)
00024c 93ea      	ST   -Y,R30
00024d e0a0      	LDI  R26,LOW(0)
00024e d03b      	RCALL _lcd_gotoxy
                 ; 0000 0120               lcd_puts(menu3);}
00024f eca5      	LDI  R26,LOW(_menu3)
000250 e0b2      	LDI  R27,HIGH(_menu3)
                 _0x46:
000251 d077      	RCALL _lcd_puts
                 _0x40:
                 ; 0000 0121 
                 ; 0000 0122 
                 ; 0000 0123           if(menu_count!=2){
000252 e0e2      	LDI  R30,LOW(2)
000253 e0f0      	LDI  R31,HIGH(2)
000254 15e4      	CP   R30,R4
000255 05f5      	CPC  R31,R5
000256 f021      	BREQ _0x41
                 ; 0000 0124               lcd_gotoxy(7,0);}
000257 e0e7      	LDI  R30,LOW(7)
000258 93ea      	ST   -Y,R30
000259 e0a0      	LDI  R26,LOW(0)
00025a c003      	RJMP _0x48
                 ; 0000 0125           else{
                 _0x41:
                 ; 0000 0126               lcd_gotoxy(7,1);}
00025b e0e7      	LDI  R30,LOW(7)
00025c 93ea      	ST   -Y,R30
00025d e0a1      	LDI  R26,LOW(1)
                 _0x48:
00025e d02b      	RCALL _lcd_gotoxy
                 ; 0000 0127 
                 ; 0000 0128 
                 ; 0000 0129           if (inout==0){
00025f 2c0a      	MOV  R0,R10
000260 280b      	OR   R0,R11
000261 f419      	BRNE _0x43
                 ; 0000 012A               lcd_puts("<==");}
                +
000262 e7af     +LDI R26 , LOW ( _0x30 + ( 10 ) )
000263 e0b2     +LDI R27 , HIGH ( _0x30 + ( 10 ) )
                 	__POINTW2MN _0x30,10
000264 c002      	RJMP _0x49
                 ; 0000 012B           else{
                 _0x43:
                 ; 0000 012C               lcd_puts("==>");}
                +
000265 e8a3     +LDI R26 , LOW ( _0x30 + ( 14 ) )
000266 e0b2     +LDI R27 , HIGH ( _0x30 + ( 14 ) )
                 	__POINTW2MN _0x30,14
                 _0x49:
000267 d061      	RCALL _lcd_puts
                 ; 0000 012D 
                 ; 0000 012E       }}
                 _0x34:
000268 cfa4      	RJMP _0x31
                 ; 0000 012F }
                 _0x45:
000269 cfff      	RJMP _0x45
                 ; .FEND
                 
                 	.DSEG
                 _0x30:
000275           	.BYTE 0x12
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00026a 93aa      	ST   -Y,R26
00026b b3e8      	IN   R30,0x18
00026c 70ef      	ANDI R30,LOW(0xF)
00026d 2fae      	MOV  R26,R30
00026e 81e8      	LD   R30,Y
00026f 7fe0      	ANDI R30,LOW(0xF0)
000270 2bea      	OR   R30,R26
000271 bbe8      	OUT  0x18,R30
                +
000272 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000273 958a     +DEC R24
000274 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000275 9ac3      	SBI  0x18,3
                +
000276 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000277 958a     +DEC R24
000278 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000279 98c3      	CBI  0x18,3
                +
00027a e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00027b 958a     +DEC R24
00027c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00027d c089      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00027e 93aa      	ST   -Y,R26
00027f 81a8      	LD   R26,Y
000280 dfe9      	RCALL __lcd_write_nibble_G100
000281 81e8          ld    r30,y
000282 95e2          swap  r30
000283 83e8          st    y,r30
000284 81a8      	LD   R26,Y
000285 dfe4      	RCALL __lcd_write_nibble_G100
                +
000286 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000287 958a     +DEC R24
000288 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000289 c07d      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00028a 93aa      	ST   -Y,R26
00028b 81e8      	LD   R30,Y
00028c e0f0      	LDI  R31,0
00028d 53e3      	SUBI R30,LOW(-__base_y_G100)
00028e 4ffd      	SBCI R31,HIGH(-__base_y_G100)
00028f 81e0      	LD   R30,Z
000290 81a9      	LDD  R26,Y+1
000291 0fae      	ADD  R26,R30
000292 dfeb      	RCALL __lcd_write_data
000293 81e9      	LDD  R30,Y+1
000294 93e0 02d1 	STS  __lcd_x,R30
000296 81e8      	LD   R30,Y
000297 93e0 02d2 	STS  __lcd_y,R30
000299 9622      	ADIW R28,2
00029a 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00029b e0a2      	LDI  R26,LOW(2)
00029c 940e 0529 	CALL SUBOPT_0x8
00029e e0ac      	LDI  R26,LOW(12)
00029f dfde      	RCALL __lcd_write_data
0002a0 e0a1      	LDI  R26,LOW(1)
0002a1 940e 0529 	CALL SUBOPT_0x8
0002a3 e0e0      	LDI  R30,LOW(0)
0002a4 93e0 02d2 	STS  __lcd_y,R30
0002a6 93e0 02d1 	STS  __lcd_x,R30
0002a8 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002a9 93aa      	ST   -Y,R26
0002aa 81a8      	LD   R26,Y
0002ab 30aa      	CPI  R26,LOW(0xA)
0002ac f031      	BREQ _0x2000005
0002ad 91e0 02d3 	LDS  R30,__lcd_maxx
0002af 91a0 02d1 	LDS  R26,__lcd_x
0002b1 17ae      	CP   R26,R30
0002b2 f060      	BRLO _0x2000004
                 _0x2000005:
0002b3 e0e0      	LDI  R30,LOW(0)
0002b4 93ea      	ST   -Y,R30
0002b5 91a0 02d2 	LDS  R26,__lcd_y
0002b7 5faf      	SUBI R26,-LOW(1)
0002b8 93a0 02d2 	STS  __lcd_y,R26
0002ba dfcf      	RCALL _lcd_gotoxy
0002bb 81a8      	LD   R26,Y
0002bc 30aa      	CPI  R26,LOW(0xA)
0002bd f409      	BRNE _0x2000007
0002be c048      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
0002bf 91e0 02d1 	LDS  R30,__lcd_x
0002c1 5fef      	SUBI R30,-LOW(1)
0002c2 93e0 02d1 	STS  __lcd_x,R30
0002c4 9ac0      	SBI  0x18,0
0002c5 81a8      	LD   R26,Y
0002c6 dfb7      	RCALL __lcd_write_data
0002c7 98c0      	CBI  0x18,0
0002c8 c03e      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002c9 93ba      	ST   -Y,R27
0002ca 93aa      	ST   -Y,R26
0002cb 931a      	ST   -Y,R17
                 _0x2000008:
0002cc 81a9      	LDD  R26,Y+1
0002cd 81ba      	LDD  R27,Y+1+1
0002ce 91ed      	LD   R30,X+
0002cf 83a9      	STD  Y+1,R26
0002d0 83ba      	STD  Y+1+1,R27
0002d1 2f1e      	MOV  R17,R30
0002d2 30e0      	CPI  R30,0
0002d3 f019      	BREQ _0x200000A
0002d4 2fa1      	MOV  R26,R17
0002d5 dfd3      	RCALL _lcd_putchar
0002d6 cff5      	RJMP _0x2000008
                 _0x200000A:
0002d7 8118      	LDD  R17,Y+0
0002d8 9623      	ADIW R28,3
0002d9 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0002da 93aa      	ST   -Y,R26
0002db b3e7      	IN   R30,0x17
0002dc 6fe0      	ORI  R30,LOW(0xF0)
0002dd bbe7      	OUT  0x17,R30
0002de 9abb      	SBI  0x17,3
0002df 9ab8      	SBI  0x17,0
0002e0 9ab9      	SBI  0x17,1
0002e1 98c3      	CBI  0x18,3
0002e2 98c0      	CBI  0x18,0
0002e3 98c1      	CBI  0x18,1
0002e4 81e8      	LD   R30,Y
0002e5 93e0 02d3 	STS  __lcd_maxx,R30
0002e7 58e0      	SUBI R30,-LOW(128)
                +
0002e8 93e0 02cf+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0002ea 81e8      	LD   R30,Y
0002eb 54e0      	SUBI R30,-LOW(192)
                +
0002ec 93e0 02d0+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0002ee e1a4      	LDI  R26,LOW(20)
0002ef e0b0      	LDI  R27,0
0002f0 940e 0563 	CALL _delay_ms
0002f2 940e 052f 	CALL SUBOPT_0x9
0002f4 940e 052f 	CALL SUBOPT_0x9
0002f6 940e 052f 	CALL SUBOPT_0x9
0002f8 e2a0      	LDI  R26,LOW(32)
0002f9 df70      	RCALL __lcd_write_nibble_G100
                +
0002fa ec88     +LDI R24 , LOW ( 200 )
0002fb e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002fc 9701     +SBIW R24 , 1
0002fd f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002fe e2a8      	LDI  R26,LOW(40)
0002ff df7e      	RCALL __lcd_write_data
000300 e0a4      	LDI  R26,LOW(4)
000301 df7c      	RCALL __lcd_write_data
000302 e8a5      	LDI  R26,LOW(133)
000303 df7a      	RCALL __lcd_write_data
000304 e0a6      	LDI  R26,LOW(6)
000305 df78      	RCALL __lcd_write_data
000306 df94      	RCALL _lcd_clear
                 _0x2080002:
000307 9621      	ADIW R28,1
000308 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000309 93ba      	ST   -Y,R27
00030a 93aa      	ST   -Y,R26
00030b 931a      	ST   -Y,R17
00030c 930a      	ST   -Y,R16
00030d 81aa      	LDD  R26,Y+2
00030e 81bb      	LDD  R27,Y+2+1
00030f 9612      	ADIW R26,2
000310 940e 05a9 	CALL __GETW1P
000312 9730      	SBIW R30,0
000313 f159      	BREQ _0x2020010
000314 81aa      	LDD  R26,Y+2
000315 81bb      	LDD  R27,Y+2+1
000316 9614      	ADIW R26,4
000317 940e 05a9 	CALL __GETW1P
000319 018f      	MOVW R16,R30
00031a 9730      	SBIW R30,0
00031b f061      	BREQ _0x2020012
                +
00031c 3002     +CPI R16 , LOW ( 2 )
00031d e0e0     +LDI R30 , HIGH ( 2 )
00031e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00031f f098      	BRLO _0x2020013
000320 01f8      	MOVW R30,R16
000321 9731      	SBIW R30,1
000322 018f      	MOVW R16,R30
                +
000323 81aa     +LDD R26 , Y + 2
000324 81bb     +LDD R27 , Y + 2 + 1
000325 9614     +ADIW R26 , 4
000326 93ed     +ST X + , R30
000327 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000328 81aa      	LDD  R26,Y+2
000329 81bb      	LDD  R27,Y+2+1
00032a 9612      	ADIW R26,2
00032b 91ed      	LD   R30,X+
00032c 91fd      	LD   R31,X+
00032d 9631      	ADIW R30,1
00032e 93fe      	ST   -X,R31
00032f 93ee      	ST   -X,R30
000330 9731      	SBIW R30,1
000331 81ac      	LDD  R26,Y+4
000332 83a0      	STD  Z+0,R26
                 _0x2020013:
000333 81aa      	LDD  R26,Y+2
000334 81bb      	LDD  R27,Y+2+1
000335 940e 05a9 	CALL __GETW1P
000337 23ff      	TST  R31
000338 f02a      	BRMI _0x2020014
000339 91ed      	LD   R30,X+
00033a 91fd      	LD   R31,X+
00033b 9631      	ADIW R30,1
00033c 93fe      	ST   -X,R31
00033d 93ee      	ST   -X,R30
                 _0x2020014:
00033e c006      	RJMP _0x2020015
                 _0x2020010:
00033f 81aa      	LDD  R26,Y+2
000340 81bb      	LDD  R27,Y+2+1
000341 efef      	LDI  R30,LOW(65535)
000342 efff      	LDI  R31,HIGH(65535)
000343 93ed      	ST   X+,R30
000344 93fc      	ST   X,R31
                 _0x2020015:
000345 8119      	LDD  R17,Y+1
000346 8108      	LDD  R16,Y+0
000347 9625      	ADIW R28,5
000348 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
000349 93ba      	ST   -Y,R27
00034a 93aa      	ST   -Y,R26
00034b 9726      	SBIW R28,6
00034c 940e 05b6 	CALL __SAVELOCR6
00034e e010      	LDI  R17,0
00034f 85ac      	LDD  R26,Y+12
000350 85bd      	LDD  R27,Y+12+1
000351 e0e0      	LDI  R30,LOW(0)
000352 e0f0      	LDI  R31,HIGH(0)
000353 93ed      	ST   X+,R30
000354 93fc      	ST   X,R31
                 _0x2020016:
000355 89ea      	LDD  R30,Y+18
000356 89fb      	LDD  R31,Y+18+1
000357 9631      	ADIW R30,1
000358 8bea      	STD  Y+18,R30
000359 8bfb      	STD  Y+18+1,R31
00035a 9731      	SBIW R30,1
00035b 91e4      	LPM  R30,Z
00035c 2f2e      	MOV  R18,R30
00035d 30e0      	CPI  R30,0
00035e f409      	BRNE PC+2
00035f c115      	RJMP _0x2020018
000360 2fe1      	MOV  R30,R17
000361 30e0      	CPI  R30,0
000362 f439      	BRNE _0x202001C
000363 3225      	CPI  R18,37
000364 f411      	BRNE _0x202001D
000365 e011      	LDI  R17,LOW(1)
000366 c002      	RJMP _0x202001E
                 _0x202001D:
000367 940e 0537 	CALL SUBOPT_0xA
                 _0x202001E:
000369 c10a      	RJMP _0x202001B
                 _0x202001C:
00036a 30e1      	CPI  R30,LOW(0x1)
00036b f4a9      	BRNE _0x202001F
00036c 3225      	CPI  R18,37
00036d f419      	BRNE _0x2020020
00036e 940e 0537 	CALL SUBOPT_0xA
000370 c102      	RJMP _0x20200CC
                 _0x2020020:
000371 e012      	LDI  R17,LOW(2)
000372 e040      	LDI  R20,LOW(0)
000373 e000      	LDI  R16,LOW(0)
000374 322d      	CPI  R18,45
000375 f411      	BRNE _0x2020021
000376 e001      	LDI  R16,LOW(1)
000377 c0fc      	RJMP _0x202001B
                 _0x2020021:
000378 322b      	CPI  R18,43
000379 f411      	BRNE _0x2020022
00037a e24b      	LDI  R20,LOW(43)
00037b c0f8      	RJMP _0x202001B
                 _0x2020022:
00037c 3220      	CPI  R18,32
00037d f411      	BRNE _0x2020023
00037e e240      	LDI  R20,LOW(32)
00037f c0f4      	RJMP _0x202001B
                 _0x2020023:
000380 c002      	RJMP _0x2020024
                 _0x202001F:
000381 30e2      	CPI  R30,LOW(0x2)
000382 f439      	BRNE _0x2020025
                 _0x2020024:
000383 e050      	LDI  R21,LOW(0)
000384 e013      	LDI  R17,LOW(3)
000385 3320      	CPI  R18,48
000386 f411      	BRNE _0x2020026
000387 6800      	ORI  R16,LOW(128)
000388 c0eb      	RJMP _0x202001B
                 _0x2020026:
000389 c003      	RJMP _0x2020027
                 _0x2020025:
00038a 30e3      	CPI  R30,LOW(0x3)
00038b f009      	BREQ PC+2
00038c c0e7      	RJMP _0x202001B
                 _0x2020027:
00038d 3320      	CPI  R18,48
00038e f010      	BRLO _0x202002A
00038f 332a      	CPI  R18,58
000390 f008      	BRLO _0x202002B
                 _0x202002A:
000391 c007      	RJMP _0x2020029
                 _0x202002B:
000392 e0aa      	LDI  R26,LOW(10)
000393 9f5a      	MUL  R21,R26
000394 2d50      	MOV  R21,R0
000395 2fe2      	MOV  R30,R18
000396 53e0      	SUBI R30,LOW(48)
000397 0f5e      	ADD  R21,R30
000398 c0db      	RJMP _0x202001B
                 _0x2020029:
000399 2fe2      	MOV  R30,R18
00039a 36e3      	CPI  R30,LOW(0x63)
00039b f449      	BRNE _0x202002F
00039c 940e 053e 	CALL SUBOPT_0xB
00039e 89e8      	LDD  R30,Y+16
00039f 89f9      	LDD  R31,Y+16+1
0003a0 81a4      	LDD  R26,Z+4
0003a1 93aa      	ST   -Y,R26
0003a2 940e 0544 	CALL SUBOPT_0xC
0003a4 c0ce      	RJMP _0x2020030
                 _0x202002F:
0003a5 37e3      	CPI  R30,LOW(0x73)
0003a6 f441      	BRNE _0x2020032
0003a7 940e 053e 	CALL SUBOPT_0xB
0003a9 940e 054a 	CALL SUBOPT_0xD
0003ab 940e 04c5 	CALL _strlen
0003ad 2f1e      	MOV  R17,R30
0003ae c00a      	RJMP _0x2020033
                 _0x2020032:
0003af 37e0      	CPI  R30,LOW(0x70)
0003b0 f461      	BRNE _0x2020035
0003b1 940e 053e 	CALL SUBOPT_0xB
0003b3 940e 054a 	CALL SUBOPT_0xD
0003b5 940e 04d1 	CALL _strlenf
0003b7 2f1e      	MOV  R17,R30
0003b8 6008      	ORI  R16,LOW(8)
                 _0x2020033:
0003b9 6002      	ORI  R16,LOW(2)
0003ba 770f      	ANDI R16,LOW(127)
0003bb e030      	LDI  R19,LOW(0)
0003bc c034      	RJMP _0x2020036
                 _0x2020035:
0003bd 36e4      	CPI  R30,LOW(0x64)
0003be f011      	BREQ _0x2020039
0003bf 36e9      	CPI  R30,LOW(0x69)
0003c0 f411      	BRNE _0x202003A
                 _0x2020039:
0003c1 6004      	ORI  R16,LOW(4)
0003c2 c002      	RJMP _0x202003B
                 _0x202003A:
0003c3 37e5      	CPI  R30,LOW(0x75)
0003c4 f431      	BRNE _0x202003C
                 _0x202003B:
0003c5 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
0003c6 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0003c7 83ee      	STD  Y+6,R30
0003c8 83ff      	STD  Y+6+1,R31
0003c9 e015      	LDI  R17,LOW(5)
0003ca c00c      	RJMP _0x202003D
                 _0x202003C:
0003cb 35e8      	CPI  R30,LOW(0x58)
0003cc f411      	BRNE _0x202003F
0003cd 6008      	ORI  R16,LOW(8)
0003ce c003      	RJMP _0x2020040
                 _0x202003F:
0003cf 37e8      	CPI  R30,LOW(0x78)
0003d0 f009      	BREQ PC+2
0003d1 c0a1      	RJMP _0x2020071
                 _0x2020040:
0003d2 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
0003d3 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
0003d4 83ee      	STD  Y+6,R30
0003d5 83ff      	STD  Y+6+1,R31
0003d6 e014      	LDI  R17,LOW(4)
                 _0x202003D:
0003d7 ff02      	SBRS R16,2
0003d8 c014      	RJMP _0x2020042
0003d9 940e 053e 	CALL SUBOPT_0xB
0003db 940e 0554 	CALL SUBOPT_0xE
0003dd 85ab      	LDD  R26,Y+11
0003de 23aa      	TST  R26
0003df f43a      	BRPL _0x2020043
0003e0 85ea      	LDD  R30,Y+10
0003e1 85fb      	LDD  R31,Y+10+1
0003e2 940e 0571 	CALL __ANEGW1
0003e4 87ea      	STD  Y+10,R30
0003e5 87fb      	STD  Y+10+1,R31
0003e6 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
0003e7 3040      	CPI  R20,0
0003e8 f011      	BREQ _0x2020044
0003e9 5f1f      	SUBI R17,-LOW(1)
0003ea c001      	RJMP _0x2020045
                 _0x2020044:
0003eb 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
0003ec c004      	RJMP _0x2020046
                 _0x2020042:
0003ed 940e 053e 	CALL SUBOPT_0xB
0003ef 940e 0554 	CALL SUBOPT_0xE
                 _0x2020046:
                 _0x2020036:
0003f1 fd00      	SBRC R16,0
0003f2 c011      	RJMP _0x2020047
                 _0x2020048:
0003f3 1715      	CP   R17,R21
0003f4 f478      	BRSH _0x202004A
0003f5 ff07      	SBRS R16,7
0003f6 c008      	RJMP _0x202004B
0003f7 ff02      	SBRS R16,2
0003f8 c004      	RJMP _0x202004C
0003f9 7f0b      	ANDI R16,LOW(251)
0003fa 2f24      	MOV  R18,R20
0003fb 5011      	SUBI R17,LOW(1)
0003fc c001      	RJMP _0x202004D
                 _0x202004C:
0003fd e320      	LDI  R18,LOW(48)
                 _0x202004D:
0003fe c001      	RJMP _0x202004E
                 _0x202004B:
0003ff e220      	LDI  R18,LOW(32)
                 _0x202004E:
000400 940e 0537 	CALL SUBOPT_0xA
000402 5051      	SUBI R21,LOW(1)
000403 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000404 2f31      	MOV  R19,R17
000405 ff01      	SBRS R16,1
000406 c017      	RJMP _0x202004F
                 _0x2020050:
000407 3030      	CPI  R19,0
000408 f0a1      	BREQ _0x2020052
000409 ff03      	SBRS R16,3
00040a c006      	RJMP _0x2020053
00040b 81ee      	LDD  R30,Y+6
00040c 81ff      	LDD  R31,Y+6+1
00040d 9125      	LPM  R18,Z+
00040e 83ee      	STD  Y+6,R30
00040f 83ff      	STD  Y+6+1,R31
000410 c005      	RJMP _0x2020054
                 _0x2020053:
000411 81ae      	LDD  R26,Y+6
000412 81bf      	LDD  R27,Y+6+1
000413 912d      	LD   R18,X+
000414 83ae      	STD  Y+6,R26
000415 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000416 940e 0537 	CALL SUBOPT_0xA
000418 3050      	CPI  R21,0
000419 f009      	BREQ _0x2020055
00041a 5051      	SUBI R21,LOW(1)
                 _0x2020055:
00041b 5031      	SUBI R19,LOW(1)
00041c cfea      	RJMP _0x2020050
                 _0x2020052:
00041d c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
00041e e320      	LDI  R18,LOW(48)
00041f 81ee      	LDD  R30,Y+6
000420 81ff      	LDD  R31,Y+6+1
000421 940e 05ad 	CALL __GETW1PF
000423 87e8      	STD  Y+8,R30
000424 87f9      	STD  Y+8+1,R31
000425 81ee      	LDD  R30,Y+6
000426 81ff      	LDD  R31,Y+6+1
000427 9632      	ADIW R30,2
000428 83ee      	STD  Y+6,R30
000429 83ff      	STD  Y+6+1,R31
                 _0x202005A:
00042a 85e8      	LDD  R30,Y+8
00042b 85f9      	LDD  R31,Y+8+1
00042c 85aa      	LDD  R26,Y+10
00042d 85bb      	LDD  R27,Y+10+1
00042e 17ae      	CP   R26,R30
00042f 07bf      	CPC  R27,R31
000430 f050      	BRLO _0x202005C
000431 5f2f      	SUBI R18,-LOW(1)
000432 85a8      	LDD  R26,Y+8
000433 85b9      	LDD  R27,Y+8+1
000434 85ea      	LDD  R30,Y+10
000435 85fb      	LDD  R31,Y+10+1
000436 1bea      	SUB  R30,R26
000437 0bfb      	SBC  R31,R27
000438 87ea      	STD  Y+10,R30
000439 87fb      	STD  Y+10+1,R31
00043a cfef      	RJMP _0x202005A
                 _0x202005C:
00043b 332a      	CPI  R18,58
00043c f028      	BRLO _0x202005D
00043d ff03      	SBRS R16,3
00043e c002      	RJMP _0x202005E
00043f 5f29      	SUBI R18,-LOW(7)
000440 c001      	RJMP _0x202005F
                 _0x202005E:
000441 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
000442 fd04      	SBRC R16,4
000443 c01a      	RJMP _0x2020061
000444 3321      	CPI  R18,49
000445 f420      	BRSH _0x2020063
000446 85a8      	LDD  R26,Y+8
000447 85b9      	LDD  R27,Y+8+1
000448 9711      	SBIW R26,1
000449 f409      	BRNE _0x2020062
                 _0x2020063:
00044a c009      	RJMP _0x20200CD
                 _0x2020062:
00044b 1753      	CP   R21,R19
00044c f010      	BRLO _0x2020067
00044d ff00      	SBRS R16,0
00044e c001      	RJMP _0x2020068
                 _0x2020067:
00044f c013      	RJMP _0x2020066
                 _0x2020068:
000450 e220      	LDI  R18,LOW(32)
000451 ff07      	SBRS R16,7
000452 c00b      	RJMP _0x2020069
000453 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000454 6100      	ORI  R16,LOW(16)
000455 ff02      	SBRS R16,2
000456 c007      	RJMP _0x202006A
000457 7f0b      	ANDI R16,LOW(251)
000458 934a      	ST   -Y,R20
000459 940e 0544 	CALL SUBOPT_0xC
00045b 3050      	CPI  R21,0
00045c f009      	BREQ _0x202006B
00045d 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
00045e 940e 0537 	CALL SUBOPT_0xA
000460 3050      	CPI  R21,0
000461 f009      	BREQ _0x202006C
000462 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
000463 5031      	SUBI R19,LOW(1)
000464 85a8      	LDD  R26,Y+8
000465 85b9      	LDD  R27,Y+8+1
000466 9712      	SBIW R26,2
000467 f008      	BRLO _0x2020059
000468 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
000469 ff00      	SBRS R16,0
00046a c008      	RJMP _0x202006D
                 _0x202006E:
00046b 3050      	CPI  R21,0
00046c f031      	BREQ _0x2020070
00046d 5051      	SUBI R21,LOW(1)
00046e e2e0      	LDI  R30,LOW(32)
00046f 93ea      	ST   -Y,R30
000470 940e 0544 	CALL SUBOPT_0xC
000472 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
000473 e010      	LDI  R17,LOW(0)
                 _0x202001B:
000474 cee0      	RJMP _0x2020016
                 _0x2020018:
000475 85ac      	LDD  R26,Y+12
000476 85bd      	LDD  R27,Y+12+1
000477 940e 05a9 	CALL __GETW1P
000479 940e 05bd 	CALL __LOADLOCR6
00047b 9664      	ADIW R28,20
00047c 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00047d 92ff      	PUSH R15
00047e 2ef8      	MOV  R15,R24
00047f 9726      	SBIW R28,6
000480 940e 05b8 	CALL __SAVELOCR4
000482 940e 055c 	CALL SUBOPT_0xF
000484 9730      	SBIW R30,0
000485 f419      	BRNE _0x2020072
000486 efef      	LDI  R30,LOW(65535)
000487 efff      	LDI  R31,HIGH(65535)
000488 c023      	RJMP _0x2080001
                 _0x2020072:
000489 01de      	MOVW R26,R28
00048a 9616      	ADIW R26,6
00048b 940e 056d 	CALL __ADDW2R15
00048d 018d      	MOVW R16,R26
00048e 940e 055c 	CALL SUBOPT_0xF
000490 83ee      	STD  Y+6,R30
000491 83ff      	STD  Y+6+1,R31
000492 e0e0      	LDI  R30,LOW(0)
000493 87e8      	STD  Y+8,R30
000494 87e9      	STD  Y+8+1,R30
000495 01de      	MOVW R26,R28
000496 961a      	ADIW R26,10
000497 940e 056d 	CALL __ADDW2R15
000499 940e 05a9 	CALL __GETW1P
00049b 93fa      	ST   -Y,R31
00049c 93ea      	ST   -Y,R30
00049d 931a      	ST   -Y,R17
00049e 930a      	ST   -Y,R16
00049f e0e9      	LDI  R30,LOW(_put_buff_G101)
0004a0 e0f3      	LDI  R31,HIGH(_put_buff_G101)
0004a1 93fa      	ST   -Y,R31
0004a2 93ea      	ST   -Y,R30
0004a3 01de      	MOVW R26,R28
0004a4 961a      	ADIW R26,10
0004a5 dea3      	RCALL __print_G101
0004a6 019f      	MOVW R18,R30
0004a7 81ae      	LDD  R26,Y+6
0004a8 81bf      	LDD  R27,Y+6+1
0004a9 e0e0      	LDI  R30,LOW(0)
0004aa 93ec      	ST   X,R30
0004ab 01f9      	MOVW R30,R18
                 _0x2080001:
0004ac 940e 05bf 	CALL __LOADLOCR4
0004ae 962a      	ADIW R28,10
0004af 90ff      	POP  R15
0004b0 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strcmp:
                 ; .FSTART _strcmp
0004b1 93ba      	ST   -Y,R27
0004b2 93aa      	ST   -Y,R26
0004b3 91e9          ld   r30,y+
0004b4 91f9          ld   r31,y+
0004b5 91a9          ld   r26,y+
0004b6 91b9          ld   r27,y+
                 strcmp0:
0004b7 916d          ld   r22,x+
0004b8 9171          ld   r23,z+
0004b9 1767          cp   r22,r23
0004ba f421          brne strcmp1
0004bb 2366          tst  r22
0004bc f7d1          brne strcmp0
                 strcmp3:
0004bd 27ee          clr  r30
0004be 9508          ret
                 strcmp1:
0004bf 1b67          sub  r22,r23
0004c0 f3e1          breq strcmp3
0004c1 e0e1          ldi  r30,1
0004c2 f408          brcc strcmp2
0004c3 50e2          subi r30,2
                 strcmp2:
0004c4 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
0004c5 93ba      	ST   -Y,R27
0004c6 93aa      	ST   -Y,R26
0004c7 91a9          ld   r26,y+
0004c8 91b9          ld   r27,y+
0004c9 27ee          clr  r30
0004ca 27ff          clr  r31
                 strlen0:
0004cb 916d          ld   r22,x+
0004cc 2366          tst  r22
0004cd f011          breq strlen1
0004ce 9631          adiw r30,1
0004cf cffb          rjmp strlen0
                 strlen1:
0004d0 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0004d1 93ba      	ST   -Y,R27
0004d2 93aa      	ST   -Y,R26
0004d3 27aa          clr  r26
0004d4 27bb          clr  r27
0004d5 91e9          ld   r30,y+
0004d6 91f9          ld   r31,y+
                 strlenf0:
0004d7 9005      	lpm  r0,z+
0004d8 2000          tst  r0
0004d9 f011          breq strlenf1
0004da 9611          adiw r26,1
0004db cffb          rjmp strlenf0
                 strlenf1:
0004dc 01fd          movw r30,r26
0004dd 9508          ret
                 ; .FEND
                 _strncpy:
                 ; .FSTART _strncpy
0004de 93aa      	ST   -Y,R26
0004df 9179          ld   r23,y+
0004e0 91e9          ld   r30,y+
0004e1 91f9          ld   r31,y+
0004e2 91a9          ld   r26,y+
0004e3 91b9          ld   r27,y+
0004e4 01cd          movw r24,r26
                 strncpy0:
0004e5 2377          tst  r23
0004e6 f051          breq strncpy1
0004e7 957a          dec  r23
0004e8 9161          ld   r22,z+
0004e9 936d          st   x+,r22
0004ea 2366          tst  r22
0004eb f7c9          brne strncpy0
                 strncpy2:
0004ec 2377          tst  r23
0004ed f019          breq strncpy1
0004ee 957a          dec  r23
0004ef 936d          st   x+,r22
0004f0 cffb          rjmp strncpy2
                 strncpy1:
0004f1 01fc          movw r30,r24
0004f2 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _lcd_str:
000287           	.BYTE 0x11
                 _seg:
000298           	.BYTE 0xD
                 _keybord:
0002a5           	.BYTE 0x10
                 _password:
0002b5           	.BYTE 0x5
                 _menu1:
0002ba           	.BYTE 0x4
                 _menu2:
0002be           	.BYTE 0x7
                 _menu3:
0002c5           	.BYTE 0x6
                 _t_bounce:
0002cb           	.BYTE 0x2
                 __base_y_G100:
0002cd           	.BYTE 0x4
                 __lcd_x:
0002d1           	.BYTE 0x1
                 __lcd_y:
0002d2           	.BYTE 0x1
                 __lcd_maxx:
0002d3           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
0004f3 e0e5      	LDI  R30,LOW(5)
0004f4 e0f0      	LDI  R31,HIGH(5)
0004f5 15e6      	CP   R30,R6
0004f6 05f7      	CPC  R31,R7
0004f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0004f8 e0e1      	LDI  R30,LOW(1)
0004f9 e0f0      	LDI  R31,HIGH(1)
0004fa 93e0 02cb 	STS  _t_bounce,R30
0004fc 93f0 02cc 	STS  _t_bounce+1,R31
0004fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0004ff e0e3      	LDI  R30,LOW(3)
000500 e0f0      	LDI  R31,HIGH(3)
000501 15e4      	CP   R30,R4
000502 05f5      	CPC  R31,R5
000503 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x3:
000504 920a      	ST   -Y,R0
000505 921a      	ST   -Y,R1
000506 92fa      	ST   -Y,R15
000507 936a      	ST   -Y,R22
000508 937a      	ST   -Y,R23
000509 938a      	ST   -Y,R24
00050a 939a      	ST   -Y,R25
00050b 93aa      	ST   -Y,R26
00050c 93ba      	ST   -Y,R27
00050d 93ea      	ST   -Y,R30
00050e 93fa      	ST   -Y,R31
00050f b7ef      	IN   R30,SREG
000510 93ea      	ST   -Y,R30
000511 cfe1      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000512 eea8      	LDI  R26,LOW(1000)
000513 e0b3      	LDI  R27,HIGH(1000)
000514 940c 0563 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000516 940e 02c9 	CALL _lcd_puts
000518 cff9      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
000519 e0e0      	LDI  R30,LOW(0)
00051a 93ea      	ST   -Y,R30
00051b e0a0      	LDI  R26,LOW(0)
00051c 940e 028a 	CALL _lcd_gotoxy
00051e ebaa      	LDI  R26,LOW(_menu1)
00051f e0b2      	LDI  R27,HIGH(_menu1)
000520 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
000521 e0e0      	LDI  R30,LOW(0)
000522 93ea      	ST   -Y,R30
000523 e0a1      	LDI  R26,LOW(1)
000524 940e 028a 	CALL _lcd_gotoxy
000526 ebae      	LDI  R26,LOW(_menu2)
000527 e0b2      	LDI  R27,HIGH(_menu2)
000528 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000529 940e 027e 	CALL __lcd_write_data
00052b e0a3      	LDI  R26,LOW(3)
00052c e0b0      	LDI  R27,0
00052d 940c 0563 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x9:
00052f e3a0      	LDI  R26,LOW(48)
000530 940e 026a 	CALL __lcd_write_nibble_G100
                +
000532 ec88     +LDI R24 , LOW ( 200 )
000533 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000534 9701     +SBIW R24 , 1
000535 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000536 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xA:
000537 932a      	ST   -Y,R18
000538 85ad      	LDD  R26,Y+13
000539 85be      	LDD  R27,Y+13+1
00053a 85ef      	LDD  R30,Y+15
00053b 89f8      	LDD  R31,Y+15+1
00053c 9509      	ICALL
00053d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xB:
00053e 89e8      	LDD  R30,Y+16
00053f 89f9      	LDD  R31,Y+16+1
000540 9734      	SBIW R30,4
000541 8be8      	STD  Y+16,R30
000542 8bf9      	STD  Y+16+1,R31
000543 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
000544 85ad      	LDD  R26,Y+13
000545 85be      	LDD  R27,Y+13+1
000546 85ef      	LDD  R30,Y+15
000547 89f8      	LDD  R31,Y+15+1
000548 9509      	ICALL
000549 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xD:
00054a 89a8      	LDD  R26,Y+16
00054b 89b9      	LDD  R27,Y+16+1
00054c 9614      	ADIW R26,4
00054d 940e 05a9 	CALL __GETW1P
00054f 83ee      	STD  Y+6,R30
000550 83ff      	STD  Y+6+1,R31
000551 81ae      	LDD  R26,Y+6
000552 81bf      	LDD  R27,Y+6+1
000553 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xE:
000554 89a8      	LDD  R26,Y+16
000555 89b9      	LDD  R27,Y+16+1
000556 9614      	ADIW R26,4
000557 940e 05a9 	CALL __GETW1P
000559 87ea      	STD  Y+10,R30
00055a 87fb      	STD  Y+10+1,R31
00055b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
00055c 01de      	MOVW R26,R28
00055d 961c      	ADIW R26,12
00055e 940e 056d 	CALL __ADDW2R15
000560 940e 05a9 	CALL __GETW1P
000562 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000563 9610      	adiw r26,0
000564 f039      	breq __delay_ms1
                 __delay_ms0:
000565 95a8      	wdr
                +
000566 ed80     +LDI R24 , LOW ( 0x7D0 )
000567 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000568 9701     +SBIW R24 , 1
000569 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00056a 9711      	sbiw r26,1
00056b f7c9      	brne __delay_ms0
                 __delay_ms1:
00056c 9508      	ret
                 
                 __ADDW2R15:
00056d 2400      	CLR  R0
00056e 0daf      	ADD  R26,R15
00056f 1db0      	ADC  R27,R0
000570 9508      	RET
                 
                 __ANEGW1:
000571 95f1      	NEG  R31
000572 95e1      	NEG  R30
000573 40f0      	SBCI R31,0
000574 9508      	RET
                 
                 __DIVW21U:
000575 2400      	CLR  R0
000576 2411      	CLR  R1
000577 e190      	LDI  R25,16
                 __DIVW21U1:
000578 0faa      	LSL  R26
000579 1fbb      	ROL  R27
00057a 1c00      	ROL  R0
00057b 1c11      	ROL  R1
00057c 1a0e      	SUB  R0,R30
00057d 0a1f      	SBC  R1,R31
00057e f418      	BRCC __DIVW21U2
00057f 0e0e      	ADD  R0,R30
000580 1e1f      	ADC  R1,R31
000581 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000582 60a1      	SBR  R26,1
                 __DIVW21U3:
000583 959a      	DEC  R25
000584 f799      	BRNE __DIVW21U1
000585 01fd      	MOVW R30,R26
000586 01d0      	MOVW R26,R0
000587 9508      	RET
                 
                 __DIVW21:
000588 d012      	RCALL __CHKSIGNW
000589 dfeb      	RCALL __DIVW21U
00058a f40e      	BRTC __DIVW211
00058b dfe5      	RCALL __ANEGW1
                 __DIVW211:
00058c 9508      	RET
                 
                 __MODW21:
00058d 94e8      	CLT
00058e ffb7      	SBRS R27,7
00058f c004      	RJMP __MODW211
000590 95a0      	COM  R26
000591 95b0      	COM  R27
000592 9611      	ADIW R26,1
000593 9468      	SET
                 __MODW211:
000594 fdf7      	SBRC R31,7
000595 dfdb      	RCALL __ANEGW1
000596 dfde      	RCALL __DIVW21U
000597 01fd      	MOVW R30,R26
000598 f40e      	BRTC __MODW212
000599 dfd7      	RCALL __ANEGW1
                 __MODW212:
00059a 9508      	RET
                 
                 __CHKSIGNW:
00059b 94e8      	CLT
00059c fff7      	SBRS R31,7
00059d c002      	RJMP __CHKSW1
00059e dfd2      	RCALL __ANEGW1
00059f 9468      	SET
                 __CHKSW1:
0005a0 ffb7      	SBRS R27,7
0005a1 c006      	RJMP __CHKSW2
0005a2 95a0      	COM  R26
0005a3 95b0      	COM  R27
0005a4 9611      	ADIW R26,1
0005a5 f800      	BLD  R0,0
0005a6 9403      	INC  R0
0005a7 fa00      	BST  R0,0
                 __CHKSW2:
0005a8 9508      	RET
                 
                 __GETW1P:
0005a9 91ed      	LD   R30,X+
0005aa 91fc      	LD   R31,X
0005ab 9711      	SBIW R26,1
0005ac 9508      	RET
                 
                 __GETW1PF:
0005ad 9005      	LPM  R0,Z+
0005ae 91f4      	LPM  R31,Z
0005af 2de0      	MOV  R30,R0
0005b0 9508      	RET
                 
                 __PUTPARD1:
0005b1 937a      	ST   -Y,R23
0005b2 936a      	ST   -Y,R22
0005b3 93fa      	ST   -Y,R31
0005b4 93ea      	ST   -Y,R30
0005b5 9508      	RET
                 
                 __SAVELOCR6:
0005b6 935a      	ST   -Y,R21
                 __SAVELOCR5:
0005b7 934a      	ST   -Y,R20
                 __SAVELOCR4:
0005b8 933a      	ST   -Y,R19
                 __SAVELOCR3:
0005b9 932a      	ST   -Y,R18
                 __SAVELOCR2:
0005ba 931a      	ST   -Y,R17
0005bb 930a      	ST   -Y,R16
0005bc 9508      	RET
                 
                 __LOADLOCR6:
0005bd 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0005be 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0005bf 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0005c0 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0005c1 8119      	LDD  R17,Y+1
0005c2 8108      	LD   R16,Y
0005c3 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  31 r1 :   9 r2 :   0 r3 :   0 r4 :   7 r5 :   4 r6 :   6 r7 :   3 
r8 :   6 r9 :   2 r10:   7 r11:   5 r12:   6 r13:   2 r14:   0 r15:   6 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:  18 r23:  12 
r24:  27 r25:  11 r26: 155 r27:  65 r28:  14 r29:   1 r30: 332 r31: 110 
x  :  27 y  : 237 z  :  19 
Registers used: 32 out of 35 (91.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   4 
adiw  :  29 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  29 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  54 brpl  :   1 brsh  :   2 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  79 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  24 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :  15 cpc   :  16 cpi   :  38 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   7 inc   :   1 jmp   :  24 ld    :  65 ldd   :  75 ldi   : 186 
lds   :  13 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  15 movw  :  38 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   8 out   :  56 pop   :   1 push  :   1 rcall :  32 ret   :  36 
reti  :   4 rjmp  :  86 rol   :   3 ror   :   0 sbc   :   2 sbci  :   5 
sbi   :   8 sbic  :   0 sbis  :   0 sbiw  :  25 sbr   :   1 sbrc  :   3 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 100 std   :  31 sts   :  13 sub   :   3 subi  :  22 swap  :   1 
tst   :   8 wdr   :   1 
Instructions used: 65 out of 116 (56.0%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000b88   2748    204   2952   32768   9.0%
[.dseg] 0x000060 0x0002d4      0    116    116    2048   5.7%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 14 warnings
